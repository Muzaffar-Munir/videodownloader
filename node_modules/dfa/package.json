{
  "_args": [
    [
      {
        "raw": "dfa@^1.0.0",
        "scope": null,
        "escapedName": "dfa",
        "name": "dfa",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "C:\\wamp64\\www\\ssc\\node_modules\\fontkit"
    ]
  ],
  "_from": "dfa@>=1.0.0 <2.0.0",
  "_id": "dfa@1.1.0",
  "_inCache": true,
  "_location": "/dfa",
  "_nodeVersion": "6.9.2",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/dfa-1.1.0.tgz_1494566669667_0.5800026464276016"
  },
  "_npmUser": {
    "name": "devongovett",
    "email": "devongovett@gmail.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "dfa@^1.0.0",
    "scope": null,
    "escapedName": "dfa",
    "name": "dfa",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/fontkit"
  ],
  "_resolved": "https://registry.npmjs.org/dfa/-/dfa-1.1.0.tgz",
  "_shasum": "d30218bd10d030fa421df3ebbc82285463a31781",
  "_shrinkwrap": null,
  "_spec": "dfa@^1.0.0",
  "_where": "C:\\wamp64\\www\\ssc\\node_modules\\fontkit",
  "author": {
    "name": "Devon Govett",
    "email": "devongovett@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/devongovett/dfa/issues"
  },
  "dependencies": {
    "babel-runtime": "^6.11.6"
  },
  "description": "A state machine compiler",
  "devDependencies": {
    "babel-core": "^6.17.0",
    "babel-plugin-transform-runtime": "^6.15.0",
    "babel-polyfill": "^6.16.0",
    "babel-preset-es2015": "^6.16.0",
    "babel-register": "^6.16.3",
    "mocha": "^3.1.0",
    "pegjs": "^0.10.0",
    "rollup": "^0.36.1",
    "rollup-plugin-babel": "^2.6.1",
    "rollup-plugin-commonjs": "^5.0.4",
    "rollup-plugin-local-resolve": "^1.0.7"
  },
  "directories": {},
  "dist": {
    "shasum": "d30218bd10d030fa421df3ebbc82285463a31781",
    "tarball": "https://registry.npmjs.org/dfa/-/dfa-1.1.0.tgz"
  },
  "files": [
    "index.js",
    "index.js.map",
    "compile.js",
    "compile.js.map"
  ],
  "gitHead": "549990f9903e88cb09d2d93359113cf1f556da77",
  "homepage": "https://github.com/devongovett/dfa#readme",
  "keywords": [
    "state",
    "machine",
    "compiler"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "devongovett",
      "email": "devongovett@gmail.com"
    }
  ],
  "name": "dfa",
  "optionalDependencies": {},
  "readme": "# dfa\n\nCompiles a regular expression like syntax to fast deterministic finite automata.\nUseful for pattern matching against non-string sequences.\n\n## Example\n\nThis example matches [Hangul](https://en.wikipedia.org/wiki/Hangul) syllables. The symbols defined in the machine are Unicode character categories which could be mapped from code points.\n\nMachine definition:\n\n```coffeescript\n# define symbols\nX   = 0; # Other character\nL   = 1; # Leading consonant\nV   = 2; # Medial vowel\nT   = 3; # Trailing consonant\nLV  = 4; # Composed <LV> syllable\nLVT = 5; # Composed <LVT> syllable\nM   = 6; # Tone mark\n\n# define variables\ndecomposed = L V T?;\npartial = LV T?;\ncomposed = LVT;\n\n# define main state machine pattern\nmain = (decomposed | partial | composed) M?;\n```\n\nVisualized, the machine looks like this (double circles are accepting states):\n\n![dfa](https://cloud.githubusercontent.com/assets/19409/19143719/8fbc6a12-8b5a-11e6-868d-99621644d094.png)\n\nCompiling and using the machine:\n\n```javascript\nimport compile from 'dfa/compile';\nimport fs from 'fs';\n\nlet stateMachine = compile(fs.readFileSync('hangul.machine', 'utf8'));\n\n// find matches\nfor (let [startIndex, endIndex] of stateMachine.match([0, 1, 2, 3, 0, 4, 6]) {\n  console.log('match:', startIndex, endIndex);\n}\n```\n\nOutput:\n```\nmatch: 1 3\nmatch: 5 6\n```\n\n## Syntax\n\nA state machine file contains a list of assignment statements. Comments are also allowed\nand are started with the `#` character. Each statement is an assignment of a variable name\nto a value or expression. Assigning a variable to a number produces a symbol, which is\nadded to the state machine's alphabet. Assigning a variable to an expression allows\nfor substitutions into later expressions. The special `main` variable should always be\nassigned to at the end of the file, and is the final expression that will be compiled.\n\nA subset of common regular expression syntax is supported. A list of operators and their\nprecedence is below. Operators with the same precedence are evaluated left to right.\n\n| Precedence | Syntax     | Type          | Meaning                                    |\n| ---------- | ---------- | --------------| ------------------------------------------ |\n| 1          | `a \\| b`   | Alternation   | Matches either `a` or `b`                  |\n| 2          | `a b`      | Concatenation | Matches `a` followed by `b`                |\n| 3          | `a*`       | Repetition    | Matches zero or more occurrences of `a`    |\n| 3          | `a+`       | Repetition    | Matches one ore more occurrences of `a`    |\n| 3          | `a?`       | Optional      | Matches zero or one occurrence of `a`      |\n| 3          | `a{n}`     | Repetition    | Matches exactly n occurrences of `a`       |\n| 3          | `a{n,}`    | Repetition    | Matches n or more occurrences of `a`       |\n| 3          | `a{,n}`    | Repetition    | Matches up to n occurrences of `a`         |\n| 3          | `a{n,m}`   | Repetition    | Matches n to m occurrences of `a`          |\n| 4          | `t:<expr>` | Tag           | Tags the following expression with tag `t` |\n| 5          | `(<expr>)` | Grouping      | Groups an expression                       |\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/devongovett/dfa.git"
  },
  "scripts": {
    "prepublish": "make",
    "test": "mocha --require babel-register --require babel-polyfill"
  },
  "version": "1.1.0"
}
